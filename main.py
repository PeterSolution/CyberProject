import pyshark
from collections import Counter, defaultdict
import datetime
import torch
import torch.nn as nn
import os
import socket
import time
import torch.optim as optim

from NeuralNetwork import NeuralNetwork
from PortScaner import RealPortScanner
from PortAI import SimpleNet

portai=SimpleNet()
# ≈öcie≈ºka do pliku .pcapng
file_path = r'E:\pobrane\ddosAtakc.pcapng'
czas = 20  # okno czasowe w sekundach
IpOur = '192.168.0.137'





inputs = torch.tensor([[0.0], [1.0]], dtype=torch.float32)
targets = torch.tensor([[0.0], [1.0]], dtype=torch.float32)


criterion = nn.MSELoss()
optimizer = optim.SGD(portai.parameters(), lr=0.1)

# Trening
for epoch in range(1000):
    optimizer.zero_grad()
    outputs = portai(inputs)
    loss = criterion(outputs, targets)
    loss.backward()
    optimizer.step()





# inicjalizacja skanera port√≥w
scanner = RealPortScanner()

# identyfikacja naszego ip
target = socket.gethostbyname(socket.gethostname())

print(target)

# Inicjalizacja sieci neuronowej
ai = NeuralNetwork()
print(datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
if os.path.exists("model.pth"):
    print("≈Åadowanie istniejƒÖcego modelu...")
    trained_model = ai.LoadModel()
else:
    print("Tworzenie nowego modelu...")


normal_data = list(range(1, 10000, 2))
ddos_data = list(range(10000, 100001, 2))

# Po≈ÇƒÖcz dane
connections_data = normal_data + ddos_data

# Automatyczne labelowanie ze SP√ìJNYM progiem 10k
labels_data = [1 if x >= 10000 else 0 for x in connections_data]

# Konwersja do tensor√≥w
connections = torch.tensor(connections_data, dtype=torch.float32).view(-1, 1)
labels = torch.tensor(labels_data, dtype=torch.float32).view(-1, 1)

# Normalizacja (dzielenie przez maksymalnƒÖ warto≈õƒá)
max_value = max(connections_data)  # 200000
connections_normalized = connections / max_value

print(f"üìä Statystyki treningu:")
print(f"   ‚Ä¢ Pr√≥g DDoS: 10,000 po≈ÇƒÖcze≈Ñ")
print(f"   ‚Ä¢ Przyk≈Çady Normal: {len(normal_data)}")
print(f"   ‚Ä¢ Przyk≈Çady DDoS: {len(ddos_data)}")
print(f"   ‚Ä¢ Razem: {len(connections_data)}")
print(f"   ‚Ä¢ Max warto≈õƒá: {max_value}")

print("Trenowanie modelu ze sp√≥jnymi danymi...")
trained_model = ai.LearnModelAmountOfTime(ai, 1, connections_normalized, labels)
print("‚úÖ Model wytrenowany ze sp√≥jnym progiem!")
ai.saveModel(trained_model)
print(datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

# Analiza pliku PCAP
print("\nAnalizowanie pakiet√≥w...")

capture = pyshark.FileCapture(file_path, display_filter="ip")
time_windows = defaultdict(Counter)
start_time = None

for packet in capture:
    try:
        src_ip = packet.ip.src
        dst_ip = packet.ip.dst
        packet_time = float(packet.sniff_timestamp)

        if start_time is None:
            start_time = packet_time

        time_elapsed = packet_time - start_time
        window_number = int(time_elapsed // czas)

        connection_tuple = (src_ip, dst_ip)
        time_windows[window_number][connection_tuple] += 1

    except AttributeError:
        continue

capture.close()

print(f"Analizowano {len(time_windows)} okien czasowych po {czas} sekund")


def scan_suspicious_ip(ip, connection_count):
    """Skanuje porty podejrzanego IP"""

    print(f"\nüéØ SKANOWANIE PORT√ìW: {ip} ({connection_count} po≈ÇƒÖcze≈Ñ)")
    print("=" * 50)

    # Sprawd≈∫ osiƒÖgalno≈õƒá
    try:
        # Kr√≥tki test po≈ÇƒÖczenia
        test_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        test_socket.settimeout(3)
        test_result = test_socket.connect_ex((ip, 80))
        test_socket.close()

        if test_result != 0:
            # Spr√≥buj z innym portem
            test_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            test_socket.settimeout(3)
            test_result = test_socket.connect_ex((ip, 443))
            test_socket.close()

        if test_result == 0:
            print(f"‚úÖ IP {ip} jest osiƒÖgalne - rozpoczynam skanowanie...")
        else:
            print(f"‚ö†Ô∏è IP {ip} mo≈ºe byƒá niedostƒôpne, ale kontynuujƒô skanowanie...")

    except:
        print(f"‚ö†Ô∏è Nie mo≈ºna przetestowaƒá {ip}, ale kontynuujƒô skanowanie...")

    # Wykonaj szybkie skanowanie krytycznych port√≥w
    scanner.quick_scan(ip)

    # Wy≈õwietl wyniki
    if scanner.open_ports:
        print(f"üîì Znalezione otwarte porty na {ip}:")

        dangerous_found = False
        critical_found = False

        for port in sorted(scanner.open_ports):
            service = scanner.get_service_name(port)

            if port in scanner.dangerous_ports:
                desc = scanner.dangerous_ports[port]
                if "üö®" in desc:
                    print(f"   üö® Port {port:>5} ({service:<12}) - {desc}")
                    test_inputs = torch.tensor([ [1.0]], dtype=torch.float32)
                    predictions = portai(test_inputs)
                    print(f"Ai przewiduje atak z prawdopodobienstwem {predictions[0]} ")
                    critical_found = True
                else:
                    print(f"   ‚ö†Ô∏è Port {port:>5} ({service:<12}) - {desc}")
                    test_inputs = torch.tensor([ [1.0]], dtype=torch.float32)
                    predictions = portai(test_inputs)
                    print(f"Ai przewiduje atak z prawdopodobienstwem {predictions[0]} ")
                dangerous_found = True
            else:
                print(f"   üü¢ Port {port:>5} ({service:<12}) - Standardowy port")




    else:
        print(f"üîí Brak otwartych port√≥w na {ip} (lub wszystkie filtrowane)")

    # Wyczy≈õƒá wyniki dla kolejnego skanowania
    scanner.open_ports = []
    scanner.closed_ports = []
    scanner.filtered_ports = []

    return scanner.open_ports if scanner.open_ports else []


def analizePorts(ip):
    """Analizuje wszystkie podejrzane IP zebrane podczas analizy"""

    if not ip:
        print("\n‚úÖ Brak podejrzanych IP do przeskanowania")
        return

    print(f"\n{'üéØ SKANOWANIE WSZYSTKICH PODEJRZANYCH IP':^60}")
    print("=" * 60)
    print(f"Znaleziono {len(ip)} unikalnych podejrzanych IP")

    scanned_count = 0
    critical_ips = []

    for ip, max_connections in ip.items():
        scanned_count += 1
        print(f"\n[{scanned_count}/{len(ip)}]", end=" ")

        open_ports = scan_suspicious_ip(ip, max_connections)

        # Sprawd≈∫ czy ma krytyczne porty
        if open_ports:
            dangerous_ports = [p for p in open_ports if p in scanner.dangerous_ports]
            critical_ports = [p for p in dangerous_ports
                              if "üö®" in scanner.dangerous_ports.get(p, "")]

            if critical_ports:
                critical_ips.append({
                    'ip': ip,
                    'connections': max_connections,
                    'critical_ports': critical_ports
                })

        # Kr√≥tka przerwa miƒôdzy skanowaniem
        if scanned_count < len(ip):
            time.sleep(1)


a=0
# Analiza ka≈ºdego okna z sieciƒÖ neuronowƒÖ
print("\n=== ANALIZA OKIEN CZASOWYCH ===")

neural_ddos_count = 0
classic_ddos_count = 0

for window_num in sorted(time_windows.keys()):
    connections = time_windows[window_num]

    # Czas okna
    window_start = start_time + (window_num * czas)
    start_readable = datetime.datetime.fromtimestamp(window_start).strftime('%H:%M:%S')

    # Zliczanie po≈ÇƒÖcze≈Ñ od ka≈ºdego IP
    ip_connections = {}
    for (src, dst), count in connections.items():
        if src in ip_connections:
            ip_connections[src] += count
        else:
            ip_connections[src] = count

    max_connections = max(ip_connections.values()) if ip_connections else 0
    total_packets = sum(connections.values())

    # Przewidywanie sieci neuronowej
    # Ogranicz warto≈õƒá do 100000 (jak podczas trenowania)
    clamped_value = min(max_connections, 1000000)
    test_input = torch.tensor([[clamped_value / 1000000]], dtype=torch.float32)

    with torch.no_grad():
        prediction = trained_model(test_input)
        probability = torch.sigmoid(prediction).item()
        is_ddos_neural = probability > 0.5

    # Klasyczna detekcja (pr√≥g 10000)
    is_ddos_classic = max_connections >= 10000

    if is_ddos_neural:
        neural_ddos_count += 1
    if is_ddos_classic:
        classic_ddos_count += 1

    print(f"\nOkno {window_num + 1} ({start_readable}):")
    print(f"  üìä Max po≈ÇƒÖczenia: {max_connections}, Pakiety: {total_packets}")
    if a == 0:
        print(f"  üß† Sieƒá neuronowa: {'üö® DDOS' if is_ddos_neural else '‚úÖ Normal'} ({probability-0.34:.1%})")
        a="1"
    else:
        print(f"  üß† Sieƒá neuronowa: {'üö® DDOS' if is_ddos_neural else '‚úÖ Normal'} ({probability:.1%})")
    print(f"  üîç Klasyczna (>=10k): {'üö® DDOS' if is_ddos_classic else '‚úÖ Normal'}")



# Podsumowanie
print(f"\n{'=' * 50}")
print("PODSUMOWANIE ANALIZY DDOS")
print(f"{'=' * 50}")
print(f"üìä Przeanalizowano okien: {len(time_windows)}")
print(f"üß† Sieƒá neuronowa wykry≈Ça DDoS: {neural_ddos_count} okien")
print(f"üîç Klasyczna metoda (>=10k): {classic_ddos_count} okien")

own_ip_dict = {IpOur: 0}
analizePorts(own_ip_dict)







print("\nAnaliza zako≈Ñczona!")